diff -pruN chrome.orig/browser/extensions/extension_service.cc chrome/browser/extensions/extension_service.cc
--- chrome.orig/browser/extensions/extension_service.cc	2014-01-17 04:36:24.000000000 +0100
+++ chrome/browser/extensions/extension_service.cc	2014-01-21 11:29:13.557712237 +0100
@@ -1169,13 +1169,6 @@ void ExtensionService::NotifyExtensionLo
     content::URLDataSource::Add(profile_, theme_source);
   }
 #endif
-
-  // Same for chrome://thumb/ resources.
-  if (extensions::PermissionsData::HasHostPermission(
-          extension, GURL(chrome::kChromeUIThumbnailURL))) {
-    ThumbnailSource* thumbnail_source = new ThumbnailSource(profile_, false);
-    content::URLDataSource::Add(profile_, thumbnail_source);
-  }
 }
 
 void ExtensionService::NotifyExtensionUnloaded(
diff -pruN chrome.orig/browser/history/top_sites_backend.cc chrome/browser/history/top_sites_backend.cc
--- chrome.orig/browser/history/top_sites_backend.cc	2014-01-17 04:36:22.000000000 +0100
+++ chrome/browser/history/top_sites_backend.cc	2014-01-21 11:53:23.853762312 +0100
@@ -17,64 +17,34 @@ using content::BrowserThread;
 namespace history {
 
 TopSitesBackend::TopSitesBackend()
-    : db_(new TopSitesDatabase()) {
+    : db_(static_cast< history::TopSitesDatabase *> (NULL)) {
 }
 
 void TopSitesBackend::Init(const base::FilePath& path) {
   db_path_ = path;
-  BrowserThread::PostTask(
-      BrowserThread::DB, FROM_HERE,
-      base::Bind(&TopSitesBackend::InitDBOnDBThread, this, path));
 }
 
 void TopSitesBackend::Shutdown() {
-  BrowserThread::PostTask(
-      BrowserThread::DB, FROM_HERE,
-      base::Bind(&TopSitesBackend::ShutdownDBOnDBThread, this));
 }
 
 void TopSitesBackend::GetMostVisitedThumbnails(
     const GetMostVisitedThumbnailsCallback& callback,
     base::CancelableTaskTracker* tracker) {
-  scoped_refptr<MostVisitedThumbnails> thumbnails = new MostVisitedThumbnails();
-
-  tracker->PostTaskAndReply(
-      BrowserThread::GetMessageLoopProxyForThread(BrowserThread::DB).get(),
-      FROM_HERE,
-      base::Bind(&TopSitesBackend::GetMostVisitedThumbnailsOnDBThread,
-                 this,
-                 thumbnails),
-      base::Bind(callback, thumbnails));
 }
 
 void TopSitesBackend::UpdateTopSites(const TopSitesDelta& delta) {
-  BrowserThread::PostTask(
-      BrowserThread::DB, FROM_HERE,
-      base::Bind(&TopSitesBackend::UpdateTopSitesOnDBThread, this, delta));
 }
 
 void TopSitesBackend::SetPageThumbnail(const MostVisitedURL& url,
                                        int url_rank,
                                        const Images& thumbnail) {
-  BrowserThread::PostTask(
-      BrowserThread::DB, FROM_HERE,
-      base::Bind(&TopSitesBackend::SetPageThumbnailOnDBThread, this, url,
-                 url_rank, thumbnail));
 }
 
 void TopSitesBackend::ResetDatabase() {
-  BrowserThread::PostTask(
-      BrowserThread::DB, FROM_HERE,
-      base::Bind(&TopSitesBackend::ResetDatabaseOnDBThread, this, db_path_));
 }
 
 void TopSitesBackend::DoEmptyRequest(const base::Closure& reply,
                                      base::CancelableTaskTracker* tracker) {
-  tracker->PostTaskAndReply(
-      BrowserThread::GetMessageLoopProxyForThread(BrowserThread::DB).get(),
-      FROM_HERE,
-      base::Bind(&base::DoNothing),
-      reply);
 }
 
 TopSitesBackend::~TopSitesBackend() {
diff -pruN chrome.orig/browser/profiles/profile_impl.cc chrome/browser/profiles/profile_impl.cc
--- chrome.orig/browser/profiles/profile_impl.cc	2014-01-17 04:36:26.000000000 +0100
+++ chrome/browser/profiles/profile_impl.cc	2014-01-21 11:01:09.290654083 +0100
@@ -1007,15 +1007,11 @@ Time ProfileImpl::GetStartTime() const {
 }
 
 history::TopSites* ProfileImpl::GetTopSites() {
-  if (!top_sites_.get()) {
-    top_sites_ = history::TopSites::Create(
-        this, GetPath().Append(chrome::kTopSitesFilename));
-  }
-  return top_sites_.get();
+  return NULL;
 }
 
 history::TopSites* ProfileImpl::GetTopSitesWithoutCreating() {
-  return top_sites_.get();
+  return NULL;
 }
 
 void ProfileImpl::OnDefaultZoomLevelChanged() {
diff -pruN chrome.orig/browser/resources/local_ntp/local_ntp.js chrome/browser/resources/local_ntp/local_ntp.js
--- chrome.orig/browser/resources/local_ntp/local_ntp.js	2014-01-17 04:36:19.000000000 +0100
+++ chrome/browser/resources/local_ntp/local_ntp.js	2014-01-21 13:06:51.023914482 +0100
@@ -230,19 +230,19 @@ var TILE_MARGIN_START = 20;
 
 
 /** @type {number} @const */
-var MAX_NUM_TILES_TO_SHOW = 8;
+var MAX_NUM_TILES_TO_SHOW = 0;
 
 
 /** @type {number} @const */
-var MIN_NUM_COLUMNS = 2;
+var MIN_NUM_COLUMNS = 0;
 
 
 /** @type {number} @const */
-var MAX_NUM_COLUMNS = 4;
+var MAX_NUM_COLUMNS = 0;
 
 
 /** @type {number} @const */
-var NUM_ROWS = 2;
+var NUM_ROWS = 0;
 
 
 /**
@@ -336,7 +336,6 @@ function onThemeChange() {
                     info.imageVerticalAlignment].join(' ').trim();
   document.body.style.background = background;
   document.body.classList.toggle(CLASSES.ALTERNATE_LOGO, info.alternateLogo);
-  updateThemeAttribution(info.attributionUrl);
   setCustomThemeStyle(info);
   renderTiles();
 }
diff -pruN chrome.orig/browser/search/instant_service.cc chrome/browser/search/instant_service.cc
--- chrome.orig/browser/search/instant_service.cc	2014-01-17 04:36:21.000000000 +0100
+++ chrome/browser/search/instant_service.cc	2014-01-21 11:27:52.502709439 +0100
@@ -108,13 +108,9 @@ InstantService::InstantService(Profile*
   content::URLDataSource::Add(profile_, new ThemeSource(profile_));
 #endif  // defined(ENABLE_THEMES)
 
-  content::URLDataSource::Add(profile_, new ThumbnailSource(profile_, false));
-  content::URLDataSource::Add(profile_, new ThumbnailSource(profile_, true));
-  content::URLDataSource::Add(profile_, new ThumbnailListSource(profile_));
   content::URLDataSource::Add(
       profile_, new FaviconSource(profile_, FaviconSource::FAVICON));
   content::URLDataSource::Add(profile_, new LocalNtpSource(profile_));
-  content::URLDataSource::Add(profile_, new MostVisitedIframeSource());
 
   profile_pref_registrar_.Init(profile_->GetPrefs());
   profile_pref_registrar_.Add(
diff -pruN chrome.orig/browser/ui/search/search_ipc_router_policy_impl.cc chrome/browser/ui/search/search_ipc_router_policy_impl.cc
--- chrome.orig/browser/ui/search/search_ipc_router_policy_impl.cc	2014-01-17 04:36:29.000000000 +0100
+++ chrome/browser/ui/search/search_ipc_router_policy_impl.cc	2014-01-21 11:05:44.203663575 +0100
@@ -23,7 +23,7 @@ SearchIPCRouterPolicyImpl::SearchIPCRout
 SearchIPCRouterPolicyImpl::~SearchIPCRouterPolicyImpl() {}
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessSetVoiceSearchSupport() {
-  return true;
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessFocusOmnibox(bool is_active_tab) {
@@ -35,15 +35,15 @@ bool SearchIPCRouterPolicyImpl::ShouldPr
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessDeleteMostVisitedItem() {
-  return !is_incognito_ && chrome::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessUndoMostVisitedDeletion() {
-  return !is_incognito_ && chrome::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessUndoAllMostVisitedDeletions() {
-  return !is_incognito_ && chrome::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessLogEvent() {
@@ -72,7 +72,7 @@ bool SearchIPCRouterPolicyImpl::ShouldSe
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendMostVisitedItems() {
-  return !is_incognito_ && chrome::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendThemeBackgroundInfo() {
@@ -80,7 +80,7 @@ bool SearchIPCRouterPolicyImpl::ShouldSe
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendToggleVoiceSearch() {
-  return true;
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSubmitQuery() {
diff -pruN chrome.orig/browser/ui/webui/ntp/app_launcher_handler.cc chrome/browser/ui/webui/ntp/app_launcher_handler.cc
--- chrome.orig/browser/ui/webui/ntp/app_launcher_handler.cc	2014-01-17 04:36:30.000000000 +0100
+++ chrome/browser/ui/webui/ntp/app_launcher_handler.cc	2014-01-21 13:27:34.560957418 +0100
@@ -379,7 +379,7 @@ void AppLauncherHandler::FillAppDictiona
   dictionary->SetBoolean("disableCreateAppShortcut", true);
 #endif
 
-#if defined(OS_CHROMEOS)
+#if 1
   // Making shortcut does not make sense on ChromeOS because it does not have
   // a desktop.
   dictionary->SetBoolean("disableCreateAppShortcut", true);
diff -pruN chrome.orig/browser/ui/webui/ntp/new_tab_ui.cc chrome/browser/ui/webui/ntp/new_tab_ui.cc
--- chrome.orig/browser/ui/webui/ntp/new_tab_ui.cc	2014-01-17 04:36:30.000000000 +0100
+++ chrome/browser/ui/webui/ntp/new_tab_ui.cc	2014-01-21 13:08:58.134918871 +0100
@@ -103,7 +103,6 @@ NewTabUI::NewTabUI(content::WebUI* web_u
   if (!GetProfile()->IsOffTheRecord()) {
     web_ui->AddMessageHandler(new browser_sync::ForeignSessionHandler());
     web_ui->AddMessageHandler(new MetricsHandler());
-    web_ui->AddMessageHandler(new MostVisitedHandler());
     web_ui->AddMessageHandler(new RecentlyClosedTabsHandler());
 #if !defined(OS_ANDROID)
     web_ui->AddMessageHandler(new FaviconWebUIHandler());
@@ -258,7 +257,6 @@ void NewTabUI::RegisterProfilePrefs(
   if (NewTabUI::IsDiscoveryInNTPEnabled())
     SuggestionsHandler::RegisterProfilePrefs(registry);
 #endif
-  MostVisitedHandler::RegisterProfilePrefs(registry);
   browser_sync::ForeignSessionHandler::RegisterProfilePrefs(registry);
 }
 
