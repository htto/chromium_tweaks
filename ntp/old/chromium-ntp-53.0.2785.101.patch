diff -pruN chromium-49.0.2623.75.orig/chrome/browser/extensions/extension_service.cc chromium-49.0.2623.75/chrome/browser/extensions/extension_service.cc
--- chromium-49.0.2623.75.orig/chrome/browser/extensions/extension_service.cc	2016-03-03 23:46:09.790590319 +0100
+++ chromium-49.0.2623.75/chrome/browser/extensions/extension_service.cc	2016-03-03 23:36:08.837237466 +0100
@@ -1076,13 +1076,6 @@ void ExtensionService::NotifyExtensionLo
     ThemeSource* theme_source = new ThemeSource(profile_);
     content::URLDataSource::Add(profile_, theme_source);
   }
-
-  // Same for chrome://thumb/ resources.
-  if (permissions_data->HasHostPermission(
-          GURL(chrome::kChromeUIThumbnailURL))) {
-    ThumbnailSource* thumbnail_source = new ThumbnailSource(profile_, false);
-    content::URLDataSource::Add(profile_, thumbnail_source);
-  }
 }
 
 void ExtensionService::OnExtensionRegisteredWithRequestContexts(
diff -pruN chromium-49.0.2623.75.orig/chrome/browser/resources/local_ntp/local_ntp.html chromium-49.0.2623.75/chrome/browser/resources/local_ntp/local_ntp.html
--- chromium-49.0.2623.75.orig/chrome/browser/resources/local_ntp/local_ntp.html	2016-03-03 23:46:09.793923652 +0100
+++ chromium-49.0.2623.75/chrome/browser/resources/local_ntp/local_ntp.html	2016-03-03 23:36:08.837237466 +0100
@@ -13,19 +13,6 @@
 </head>
 <body>
   <div id="ntp-contents">
-    <div id="most-visited">
-      <div id="mv-tiles"></div>
-      <!-- Notification shown when a tile is blacklisted. -->
-      <div id="mv-notice" class="mv-notice-hide">
-        <span id="mv-msg"></span>
-        <!-- Links in the notification. -->
-        <span id="mv-notice-links">
-          <span id="mv-undo" tabIndex="1"></span>
-          <span id="mv-restore" tabIndex="1"></span>
-          <div id="mv-notice-x" tabIndex="1"></div>
-        </span>
-      </div>
-    </div>
     <div id="attribution"><div id="attribution-text"></div></div>
   </div>
 </body>
diff -pruN chromium-49.0.2623.75.orig/chrome/browser/resources/local_ntp/local_ntp.js chromium-49.0.2623.75/chrome/browser/resources/local_ntp/local_ntp.js
--- chromium-49.0.2623.75.orig/chrome/browser/resources/local_ntp/local_ntp.js	2016-03-03 23:46:09.793923652 +0100
+++ chromium-49.0.2623.75/chrome/browser/resources/local_ntp/local_ntp.js	2016-03-03 23:48:55.313929028 +0100
@@ -556,7 +556,6 @@ function updateContentWidth() {
   // We add an extra pixel because rounding errors on different zooms can
   // make the width shorter than it should be.
   var tilesContainerWidth = Math.ceil(numColumnsShown * tileRequiredWidth) + 1;
-  $(IDS.TILES).style.width = tilesContainerWidth + 'px';
   if (fakebox) {
     // -2 to account for border.
     var fakeboxWidth = (tilesContainerWidth - NTP_DESIGN.tileMargin - 2);
@@ -769,6 +768,8 @@ function init() {
     modifyNtpDesignForIcons();
   document.querySelector('#ntp-contents').classList.add(NTP_DESIGN.mainClass);
 
+  if (false)
+  {
   // Hide notifications after fade out, so we can't focus on links via keyboard.
   notification.addEventListener('webkitTransitionEnd', hideNotification);
 
@@ -794,6 +795,7 @@ function init() {
   createAndAppendElement(
       notificationCloseButton, 'div', CLASSES.BLACKLIST_BUTTON_INNER);
   notificationCloseButton.addEventListener('click', hideNotification);
+  }
 
   window.addEventListener('resize', onResize);
   updateContentWidth();
@@ -802,7 +804,6 @@ function init() {
 
   ntpApiHandle = topLevelHandle.newTabPage;
   ntpApiHandle.onthemechange = onThemeChange;
-  ntpApiHandle.onmostvisitedchange = onMostVisitedChange;
 
   ntpApiHandle.oninputstart = onInputStart;
   ntpApiHandle.oninputcancel = restoreNtp;
@@ -860,10 +861,13 @@ function init() {
     document.documentElement.classList.add(CLASSES.RTL);
   }
 
+  if (false)
+  {
   var iframe = document.createElement('iframe');
   // Change the order of tabbing the page to start with NTP tiles.
   iframe.setAttribute('tabindex', '1');
   iframe.id = 'mv-single';
+  }
 
   var args = [];
 
@@ -877,6 +881,8 @@ function init() {
   args.push('removeTooltip=' +
       encodeURIComponent(configData.translatedStrings.removeThumbnailTooltip));
 
+  if (false)
+  {
   iframe.src = '//most-visited/single.html?' + args.join('&');
   $(IDS.TILES).appendChild(iframe);
 
@@ -886,6 +892,7 @@ function init() {
   };
 
   window.addEventListener('message', handlePostMessage);
+  }
 }
 
 
diff -pruN chromium-49.0.2623.75.orig/chrome/browser/search/instant_service.cc chromium-49.0.2623.75/chrome/browser/search/instant_service.cc
--- chromium-49.0.2623.75.orig/chrome/browser/search/instant_service.cc	2016-03-03 23:46:09.793923652 +0100
+++ chromium-49.0.2623.75/chrome/browser/search/instant_service.cc	2016-03-03 23:36:08.840570800 +0100
@@ -65,9 +65,7 @@ const char kLocalNTPSuggestionService[]
 const char kLocalNTPSuggestionServiceEnabled[] = "Enabled";
 
 bool IsLocalNTPSuggestionServiceEnabled() {
-  return base::StartsWith(
-      base::FieldTrialList::FindFullName(kLocalNTPSuggestionService),
-      kLocalNTPSuggestionServiceEnabled, base::CompareCase::INSENSITIVE_ASCII);
+    return false;
 }
 
 }  // namespace
@@ -135,9 +133,6 @@ InstantService::InstantService(Profile*
   // on Android.
 #if !defined(OS_ANDROID)
   content::URLDataSource::Add(profile_, new LocalNtpSource(profile_));
-  content::URLDataSource::Add(profile_, new ThumbnailSource(profile_, false));
-  content::URLDataSource::Add(profile_, new ThumbnailSource(profile_, true));
-  content::URLDataSource::Add(profile_, new ThumbnailListSource(profile_));
 #endif  // !defined(OS_ANDROID)
 
   favicon::FallbackIconService* fallback_icon_service =
@@ -150,7 +145,6 @@ InstantService::InstantService(Profile*
       profile_, new FaviconSource(profile_, FaviconSource::FAVICON));
   content::URLDataSource::Add(
       profile_, new LargeIconSource(fallback_icon_service, large_icon_service));
-  content::URLDataSource::Add(profile_, new MostVisitedIframeSource());
 
   if (IsLocalNTPSuggestionServiceEnabled()) {
     suggestions_service_ =
diff -pruN chromium-49.0.2623.75.orig/chrome/browser/search/search.cc chromium-49.0.2623.75/chrome/browser/search/search.cc
--- chromium-49.0.2623.75.orig/chrome/browser/search/search.cc	2016-03-03 23:46:09.793923652 +0100
+++ chromium-49.0.2623.75/chrome/browser/search/search.cc	2016-03-03 23:36:08.840570800 +0100
@@ -244,7 +244,7 @@ NewTabURLState IsValidNewTabURL(Profile*
     return NEW_TAB_URL_INSECURE;
   if (!IsURLAllowedForSupervisedUser(new_tab_url, profile))
     return NEW_TAB_URL_BLOCKED;
-  return NEW_TAB_URL_VALID;
+  return NEW_TAB_URL_NOT_SET;
 }
 
 // Used to look up the URL to use for the New Tab page. Also tracks how we
diff -pruN chromium-49.0.2623.75.orig/chrome/browser/ui/search/search_ipc_router_policy_impl.cc chromium-49.0.2623.75/chrome/browser/ui/search/search_ipc_router_policy_impl.cc
--- chromium-49.0.2623.75.orig/chrome/browser/ui/search/search_ipc_router_policy_impl.cc	2016-03-03 23:46:09.793923652 +0100
+++ chromium-49.0.2623.75/chrome/browser/ui/search/search_ipc_router_policy_impl.cc	2016-03-03 23:36:08.840570800 +0100
@@ -31,15 +31,15 @@ bool SearchIPCRouterPolicyImpl::ShouldPr
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessDeleteMostVisitedItem() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessUndoMostVisitedDeletion() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessUndoAllMostVisitedDeletions() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessLogEvent() {
@@ -81,7 +81,7 @@ bool SearchIPCRouterPolicyImpl::ShouldSe
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendMostVisitedItems() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendThemeBackgroundInfo() {
diff -pruN chromium-49.0.2623.75.orig/components/history/core/browser/top_sites_backend.cc chromium-49.0.2623.75/components/history/core/browser/top_sites_backend.cc
--- chromium-49.0.2623.75.orig/components/history/core/browser/top_sites_backend.cc	2016-03-03 23:46:09.793923652 +0100
+++ chromium-49.0.2623.75/components/history/core/browser/top_sites_backend.cc	2016-03-03 23:36:08.840570800 +0100
@@ -23,58 +23,36 @@ namespace history {
 
 TopSitesBackend::TopSitesBackend(
     const scoped_refptr<base::SingleThreadTaskRunner>& db_task_runner)
-    : db_(new TopSitesDatabase()), db_task_runner_(db_task_runner) {
+    : db_(static_cast< TopSitesDatabase *> (NULL)), db_task_runner_(db_task_runner) {
   DCHECK(db_task_runner_);
 }
 
 void TopSitesBackend::Init(const base::FilePath& path) {
   db_path_ = path;
-  db_task_runner_->PostTask(
-      FROM_HERE, base::Bind(&TopSitesBackend::InitDBOnDBThread, this, path));
 }
 
 void TopSitesBackend::Shutdown() {
-  db_task_runner_->PostTask(
-      FROM_HERE, base::Bind(&TopSitesBackend::ShutdownDBOnDBThread, this));
 }
 
 void TopSitesBackend::GetMostVisitedThumbnails(
     const GetMostVisitedThumbnailsCallback& callback,
     base::CancelableTaskTracker* tracker) {
-  scoped_refptr<MostVisitedThumbnails> thumbnails = new MostVisitedThumbnails();
-  tracker->PostTaskAndReply(
-      db_task_runner_.get(), FROM_HERE,
-      base::Bind(&TopSitesBackend::GetMostVisitedThumbnailsOnDBThread, this,
-                 thumbnails),
-      base::Bind(callback, thumbnails));
 }
 
 void TopSitesBackend::UpdateTopSites(const TopSitesDelta& delta,
                                      const RecordHistogram record_or_not) {
-  db_task_runner_->PostTask(
-      FROM_HERE,
-      base::Bind(&TopSitesBackend::UpdateTopSitesOnDBThread, this, delta,
-                 record_or_not));
 }
 
 void TopSitesBackend::SetPageThumbnail(const MostVisitedURL& url,
                                        int url_rank,
                                        const Images& thumbnail) {
-  db_task_runner_->PostTask(
-      FROM_HERE, base::Bind(&TopSitesBackend::SetPageThumbnailOnDBThread, this,
-                            url, url_rank, thumbnail));
 }
 
 void TopSitesBackend::ResetDatabase() {
-  db_task_runner_->PostTask(
-      FROM_HERE,
-      base::Bind(&TopSitesBackend::ResetDatabaseOnDBThread, this, db_path_));
 }
 
 void TopSitesBackend::DoEmptyRequest(const base::Closure& reply,
                                      base::CancelableTaskTracker* tracker) {
-  tracker->PostTaskAndReply(db_task_runner_.get(), FROM_HERE,
-                            base::Bind(&base::DoNothing), reply);
 }
 
 TopSitesBackend::~TopSitesBackend() {
