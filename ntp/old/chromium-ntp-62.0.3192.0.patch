diff -pruN chromium-62.0.3192.0.orig/chrome/browser/extensions/extension_service.cc chromium-62.0.3192.0/chrome/browser/extensions/extension_service.cc
--- chromium-62.0.3192.0.orig/chrome/browser/extensions/extension_service.cc	2017-08-22 21:04:39.000000000 +0200
+++ chromium-62.0.3192.0/chrome/browser/extensions/extension_service.cc	2017-08-26 21:54:50.662424862 +0200
@@ -1143,13 +1143,6 @@ void ExtensionService::NotifyExtensionLo
     ThemeSource* theme_source = new ThemeSource(profile_);
     content::URLDataSource::Add(profile_, theme_source);
   }
-
-  // Same for chrome://thumb/ resources.
-  if (permissions_data->HasHostPermission(
-          GURL(chrome::kChromeUIThumbnailURL))) {
-    ThumbnailSource* thumbnail_source = new ThumbnailSource(profile_, false);
-    content::URLDataSource::Add(profile_, thumbnail_source);
-  }
 }
 
 void ExtensionService::OnExtensionRegisteredWithRequestContexts(
diff -pruN chromium-62.0.3192.0.orig/chrome/browser/resources/local_ntp/local_ntp.html chromium-62.0.3192.0/chrome/browser/resources/local_ntp/local_ntp.html
--- chromium-62.0.3192.0.orig/chrome/browser/resources/local_ntp/local_ntp.html	2017-08-22 21:04:39.000000000 +0200
+++ chromium-62.0.3192.0/chrome/browser/resources/local_ntp/local_ntp.html	2017-08-26 21:54:50.662424862 +0200
@@ -35,20 +35,6 @@
         <div id="fakebox-speech" tabIndex="0" hidden></div>
       </div>
     </div>
-    <div id="most-visited">
-      <!-- The container for the tiles. The MV iframe goes in here. -->
-      <div id="mv-tiles"></div>
-      <!-- Notification shown when a tile is blacklisted. -->
-      <div id="mv-notice" class="mv-notice-hide">
-        <span id="mv-msg"></span>
-        <!-- Links in the notification. -->
-        <span id="mv-notice-links">
-          <span id="mv-undo" tabIndex="1"></span>
-          <span id="mv-restore" tabIndex="1"></span>
-          <div id="mv-notice-x" tabIndex="1"></div>
-        </span>
-      </div>
-    </div>
     <div id="attribution"><div id="attribution-text"></div></div>
   </div>
 
diff -pruN chromium-62.0.3192.0.orig/chrome/browser/resources/local_ntp/local_ntp.js chromium-62.0.3192.0/chrome/browser/resources/local_ntp/local_ntp.js
--- chromium-62.0.3192.0.orig/chrome/browser/resources/local_ntp/local_ntp.js	2017-08-22 21:04:39.000000000 +0200
+++ chromium-62.0.3192.0/chrome/browser/resources/local_ntp/local_ntp.js	2017-08-26 21:54:50.662424862 +0200
@@ -177,8 +177,6 @@ function renderTheme() {
     titleColor = NTP_DESIGN.titleColorAgainstDark;
   }
   themeinfo.tileTitleColor = convertToRGBAColor(titleColor);
-
-  $(IDS.TILES_IFRAME).contentWindow.postMessage(themeinfo, '*');
 }
 
 
@@ -477,33 +475,10 @@ function handlePostMessage(event) {
  * section, and Google-specific elements for a Google-provided page.
  */
 function init() {
-  // Hide notifications after fade out, so we can't focus on links via keyboard.
-  $(IDS.NOTIFICATION).addEventListener('transitionend', hideNotification);
-
-  $(IDS.NOTIFICATION_MESSAGE).textContent =
-      configData.translatedStrings.thumbnailRemovedNotification;
-
-  var undoLink = $(IDS.UNDO_LINK);
-  undoLink.addEventListener('click', onUndo);
-  registerKeyHandler(undoLink, KEYCODE.ENTER, onUndo);
-  undoLink.textContent = configData.translatedStrings.undoThumbnailRemove;
-
-  var restoreAllLink = $(IDS.RESTORE_ALL_LINK);
-  restoreAllLink.addEventListener('click', onRestoreAll);
-  registerKeyHandler(restoreAllLink, KEYCODE.ENTER, onRestoreAll);
-  restoreAllLink.textContent =
-      configData.translatedStrings.restoreThumbnailsShort;
-
-  $(IDS.ATTRIBUTION_TEXT).textContent =
-      configData.translatedStrings.attributionIntro;
-
-  $(IDS.NOTIFICATION_CLOSE_BUTTON).addEventListener('click', hideNotification);
-
   var embeddedSearchApiHandle = window.chrome.embeddedSearch;
 
   ntpApiHandle = embeddedSearchApiHandle.newTabPage;
   ntpApiHandle.onthemechange = onThemeChange;
-  ntpApiHandle.onmostvisitedchange = onMostVisitedChange;
 
   var searchboxApiHandle = embeddedSearchApiHandle.searchBox;
 
@@ -606,20 +581,6 @@ function init() {
 
   args.push('removeTooltip=' +
       encodeURIComponent(configData.translatedStrings.removeThumbnailTooltip));
-
-  // Create the most visited iframe.
-  var iframe = document.createElement('iframe');
-  iframe.id = IDS.TILES_IFRAME;
-  iframe.tabIndex = 1;
-  iframe.src = 'chrome-search://most-visited/single.html?' + args.join('&');
-  $(IDS.TILES).appendChild(iframe);
-
-  iframe.onload = function() {
-    reloadTiles();
-    renderTheme();
-  };
-
-  window.addEventListener('message', handlePostMessage);
 }
 
 
diff -pruN chromium-62.0.3192.0.orig/chrome/browser/search/instant_service.cc chromium-62.0.3192.0/chrome/browser/search/instant_service.cc
--- chromium-62.0.3192.0.orig/chrome/browser/search/instant_service.cc	2017-08-22 21:04:40.000000000 +0200
+++ chromium-62.0.3192.0/chrome/browser/search/instant_service.cc	2017-08-26 21:54:50.662424862 +0200
@@ -123,13 +123,9 @@ InstantService::InstantService(Profile*
 
   content::URLDataSource::Add(profile_, new ThemeSource(profile_));
   content::URLDataSource::Add(profile_, new LocalNtpSource(profile_));
-  content::URLDataSource::Add(profile_, new ThumbnailSource(profile_, false));
-  content::URLDataSource::Add(profile_, new ThumbnailSource(profile_, true));
-  content::URLDataSource::Add(profile_, new ThumbnailListSource(profile_));
 #endif  // !defined(OS_ANDROID)
 
   content::URLDataSource::Add(profile_, new FaviconSource(profile_));
-  content::URLDataSource::Add(profile_, new MostVisitedIframeSource());
 }
 
 InstantService::~InstantService() = default;
diff -pruN chromium-62.0.3192.0.orig/chrome/browser/search/search.cc chromium-62.0.3192.0/chrome/browser/search/search.cc
--- chromium-62.0.3192.0.orig/chrome/browser/search/search.cc	2017-08-22 21:04:40.000000000 +0200
+++ chromium-62.0.3192.0/chrome/browser/search/search.cc	2017-08-26 21:54:50.665758195 +0200
@@ -168,7 +168,7 @@ NewTabURLState IsValidNewTabURL(Profile*
     return NEW_TAB_URL_INSECURE;
   if (!IsURLAllowedForSupervisedUser(new_tab_url, profile))
     return NEW_TAB_URL_BLOCKED;
-  return NEW_TAB_URL_VALID;
+  return NEW_TAB_URL_NOT_SET;
 }
 
 bool ShouldShowLocalNewTab(const GURL& url, Profile* profile) {
diff -pruN chromium-62.0.3192.0.orig/chrome/browser/ui/search/search_ipc_router_policy_impl.cc chromium-62.0.3192.0/chrome/browser/ui/search/search_ipc_router_policy_impl.cc
--- chromium-62.0.3192.0.orig/chrome/browser/ui/search/search_ipc_router_policy_impl.cc	2017-08-22 21:04:40.000000000 +0200
+++ chromium-62.0.3192.0/chrome/browser/ui/search/search_ipc_router_policy_impl.cc	2017-08-26 21:54:50.665758195 +0200
@@ -27,15 +27,15 @@ bool SearchIPCRouterPolicyImpl::ShouldPr
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessDeleteMostVisitedItem() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessUndoMostVisitedDeletion() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessUndoAllMostVisitedDeletions() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldProcessLogEvent() {
@@ -69,7 +69,7 @@ bool SearchIPCRouterPolicyImpl::ShouldSe
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendMostVisitedItems() {
-  return !is_incognito_ && search::IsInstantNTP(web_contents_);
+  return false;
 }
 
 bool SearchIPCRouterPolicyImpl::ShouldSendThemeBackgroundInfo() {
diff -pruN chromium-62.0.3192.0.orig/components/history/core/browser/top_sites_backend.cc chromium-62.0.3192.0/components/history/core/browser/top_sites_backend.cc
--- chromium-62.0.3192.0.orig/components/history/core/browser/top_sites_backend.cc	2017-08-22 21:04:42.000000000 +0200
+++ chromium-62.0.3192.0/components/history/core/browser/top_sites_backend.cc	2017-08-26 21:54:50.665758195 +0200
@@ -24,7 +24,7 @@
 namespace history {
 
 TopSitesBackend::TopSitesBackend()
-    : db_(new TopSitesDatabase()),
+    : db_(static_cast< TopSitesDatabase *> (NULL)),
       db_task_runner_(base::CreateSequencedTaskRunnerWithTraits(
           {base::TaskPriority::USER_VISIBLE,
            base::TaskShutdownBehavior::BLOCK_SHUTDOWN, base::MayBlock()})) {
@@ -33,52 +33,30 @@ TopSitesBackend::TopSitesBackend()
 
 void TopSitesBackend::Init(const base::FilePath& path) {
   db_path_ = path;
-  db_task_runner_->PostTask(
-      FROM_HERE, base::Bind(&TopSitesBackend::InitDBOnDBThread, this, path));
 }
 
 void TopSitesBackend::Shutdown() {
-  db_task_runner_->PostTask(
-      FROM_HERE, base::Bind(&TopSitesBackend::ShutdownDBOnDBThread, this));
 }
 
 void TopSitesBackend::GetMostVisitedThumbnails(
     const GetMostVisitedThumbnailsCallback& callback,
     base::CancelableTaskTracker* tracker) {
-  scoped_refptr<MostVisitedThumbnails> thumbnails = new MostVisitedThumbnails();
-  tracker->PostTaskAndReply(
-      db_task_runner_.get(), FROM_HERE,
-      base::Bind(&TopSitesBackend::GetMostVisitedThumbnailsOnDBThread, this,
-                 thumbnails),
-      base::Bind(callback, thumbnails));
 }
 
 void TopSitesBackend::UpdateTopSites(const TopSitesDelta& delta,
                                      const RecordHistogram record_or_not) {
-  db_task_runner_->PostTask(
-      FROM_HERE,
-      base::Bind(&TopSitesBackend::UpdateTopSitesOnDBThread, this, delta,
-                 record_or_not));
 }
 
 void TopSitesBackend::SetPageThumbnail(const MostVisitedURL& url,
                                        int url_rank,
                                        const Images& thumbnail) {
-  db_task_runner_->PostTask(
-      FROM_HERE, base::Bind(&TopSitesBackend::SetPageThumbnailOnDBThread, this,
-                            url, url_rank, thumbnail));
 }
 
 void TopSitesBackend::ResetDatabase() {
-  db_task_runner_->PostTask(
-      FROM_HERE,
-      base::Bind(&TopSitesBackend::ResetDatabaseOnDBThread, this, db_path_));
 }
 
 void TopSitesBackend::DoEmptyRequest(const base::Closure& reply,
                                      base::CancelableTaskTracker* tracker) {
-  tracker->PostTaskAndReply(db_task_runner_.get(), FROM_HERE,
-                            base::Bind(&base::DoNothing), reply);
 }
 
 TopSitesBackend::~TopSitesBackend() {
